''' fre cmor '''

import click

from .cmor_mixer import _cmor_run_subtool

@click.group(help=click.style(" - access fre cmor subcommands", fg=(232,91,204)))
def cmor_cli():
    ''' entry point to fre cmor click commands '''

@cmor_cli.command()
@click.option("-d", "--indir",
              type=str,
              help="directory containing netCDF files. keys specified in json_var_list are local " + \
                   "variable names used for targeting specific files in this directory",
              required=True)
@click.option("-l", "--varlist",
              type=str,
              help="path pointing to a json file containing directory of key/value pairs. " + \
                   "the keys are the \'local\' names used in the filename, and the values " + \
                   "pointed to by those keys are strings representing the name of the variable " + \
                   "contained in targeted files. the key and value are often the same, " + \
                   "but it is not required.",
              required=True)
@click.option("-r", "--table_config",
              type=str,
              help="json file containing CMIP-compliant per-variable/metadata for specific " + \
                   "MIP table. The MIP table can generally be identified by the specific " + \
                   "filename (e.g. \'Omon\')",
              required=True)
@click.option("-p", "--exp_config",
              type=str,
              help="json file containing metadata dictionary for CMORization. this metadata is " + \
                   "effectively appended to the final output file's header",
              required=True)
@click.option("-o", "--outdir",
              type=str,
              help="directory root that will contain the full output and output directory " + \
                   "structure generated by the cmor module upon request.",
              required=True)
@click.option('-v', "--opt_var_name",
              type = str,
              help="optional, specify a variable name to specifically process only filenames " + \
                   "matching that variable name. I.e., this string help target local_vars, not " + \
                   "target_vars.",
              required=False)
@click.pass_context
def run(context, indir, varlist, table_config, exp_config, outdir, opt_var_name):
    # pylint: disable=unused-argument
    """ 
    Rewrite climate model output files with CMIP-compliant metadata for down-stream publishing
    """ 
    context.invoke(
        _cmor_run_subtool,
        indir = indir,
        json_var_list = varlist,
        json_table_config = table_config,
        json_exp_config = exp_config,
        outdir = outdir,
        opt_var_name = opt_var_name
    )
    #    context.forward(
    #        _cmor_run_subtool() )

if __name__ == "__main__":
    cmor_cli()
